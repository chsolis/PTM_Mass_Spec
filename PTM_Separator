---
title: "PTM Separator Version 1.2"
author: "Christopher Solis"
date: "10/06/2022"
output:
  html_document: default
  pdf_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## 1. Load Packages
```{r, include=FALSE}
#install.packages(tidyverse) # in case it needs to be installed
library(tidyverse) # tidyverse has dplyr, tidyr, ggplot2

# Set working directory
Dir = dirname(rstudioapi::getSourceEditorContext()$path) 
setwd(Dir)
getwd()

```

## 2. Type file names
```{r}
# Type file name here:
#MyFileName <- 'Mech-aactinin_ptmprofile.csv'
MyFileName <- 'Chem-aactinin_ptmprofile.csv'

# Type variable names here:
#Treatment1 <- "Unflexed" # This must be the control
#Treatment2 <- "24hr-flexed"
#Treatment3 <- "24hr-flexed-6hr-unflexed"
Treatment1 <- "UT" # This must be the control
Treatment2 <- "OM"
Treatment3 <- "Mava"

#Type shorthand versions for each tratment
#Treatment1Short <- "UF"
#Treatment2Short <- "F"
#Treatment3Short <- "F-UF"
Treatment1Short <- "UT"
Treatment2Short <- "OM"
Treatment3Short <- "Mava"
```

## 3. Load the data
```{r}
DataFrame <- read_csv(MyFileName)
DataFrame <- data.frame(DataFrame)
# Set the columm "Treatment" as a factor
DataFrame$Treatment <- factor(DataFrame$Treatment, levels=unique(DataFrame$Treatment[order(DataFrame$Treatment)]))
head(DataFrame)
```

# 4. Filter Data based on A_score (Ascore = 13 = 95% confidence; Ascore 19% = 99% confidence). Remove incorrect modifications
```{r}
# Remove values with poor A-score
print(paste0("Number or rows before filtering A-score, unlikely modifications = ",sprintf("%.0f",nrow(DataFrame))," rows"))
DataFrame <- DataFrame %>% filter(DataFrame$Best.AScore >13) # Filter based on A-score
print(paste0("Number or rows after filtering A-score = ",sprintf("%.0f",nrow(DataFrame))," rows"))

# Remove internal N-acetyl
if (str_detect(DataFrame$Modifications[1], "[N-]") && DataFrame$Protein.Position[1] =="M1" ) {
  DataFrame1 <- DataFrame[1,]
  DataFrame <- DataFrame %>% filter(!str_detect(Modifications, "[N-]"))
  DataFrame <- rbind(DataFrame1,DataFrame)
  } else {
    DataFrame <- DataFrame %>% filter(!str_detect(Modifications, "[N-]"))
  }
```

## 5. Separate data found in the same columns
```{r}
# Load "reshape2" to split content withing columns
library(reshape2)

# Split the "Protein Position" into two columns called "aa" (for aa identity) and "Position" (for aa position)
DataSplitted <- colsplit(DataFrame$Protein.Position, "(?<=\\p{L})(?=[\\d+$])", c("char", "digit"))
DataFrame$aa <- DataSplitted[,1]
DataFrame$Position <- DataSplitted[,2]

# Define "Modified" and "Unmodified" columns as numeric
DataFrame$Modified <- as.numeric(DataFrame$Modified)
DataFrame$Unmodified <- as.numeric(DataFrame$Unmodified)

# Normalize values of "Modified" and "Unmodified" columns
DataFrame$Norm.modified <- DataFrame$Modified/(DataFrame$Modified+DataFrame$Unmodified)
DataFrame$Norm.unmodified <- 1-DataFrame$Norm.modified

# Simplify annotation of PTMs
for (i in 1:nrow(DataFrame)) {
          if (str_detect(DataFrame$Modifications[i], "^Acetyl")) {
                DataFrame$Modifications[i] <- "ac"
        } else if (str_detect(DataFrame$Modifications[i], "^Phospho")) {
                DataFrame$Modifications[i] <- "p"
        } else if (str_detect(DataFrame$Modifications[i], "^Ubiquitin")) {
                DataFrame$Modifications[i] <- "ub"
        } else
                DataFrame$Modifications[i] <- "NA"
}

# Create unique ID for each PTM by combining "Position" and "Modifications"
DataFrame$PTMID <-paste0(DataFrame$Position,DataFrame$Modifications)


```

## 5. Create individual data frames for each PTM
```{r, message = FALSE, warning = FALSE, echo = FALSE}
library(dplyr)

AcetylDataFrame <- DataFrame %>% filter(DataFrame$Modifications == "ac")
PhosphoDataFrame <- DataFrame %>% filter(DataFrame$Modifications == "p")
UbiquitinDataFrame <- DataFrame %>% filter(DataFrame$Modifications == "ub")

# Generate summary data files
AcetylDataFrame.Summary <- AcetylDataFrame %>%
  group_by(Position) %>%
  summarise(
    Mean.Mod = mean(Norm.modified),
    SD.Mod = sd(Norm.modified, na.rm = TRUE),
    Mean.Unmod = mean(Norm.unmodified),
    SD.Unmod = sd(Norm.unmodified, na.rm = TRUE),
  )
#AcetylDataFrame.Summary
AcetylDataFrame.Summary[is.na(AcetylDataFrame.Summary)] <- 0
AcetylDataFrame.Summary <- AcetylDataFrame.Summary %>% add_column(Norm.modification = "Acetylation")

PhosphoDataFrame.Summary <- PhosphoDataFrame %>%
  group_by(Position) %>%
  summarise(
    Mean.Mod = mean(Norm.modified),
    SD.Mod = sd(Norm.modified, na.rm = TRUE),
    Mean.Unmod = mean(Norm.unmodified),
    SD.Unmod = sd(Norm.unmodified, na.rm = TRUE),
  )
#PhosphoDataFrame.Summary
PhosphoDataFrame.Summary[is.na(PhosphoDataFrame.Summary)] <- 0
PhosphoDataFrame.Summary <- PhosphoDataFrame.Summary %>% add_column(Norm.modification = "Phosphorylation")

UbiquitinDataFrame.Summary <- UbiquitinDataFrame %>%
  group_by(Position) %>%
  summarise(
    Mean.Mod = mean(Norm.modified),
    SD.Mod = sd(Norm.modified, na.rm = TRUE),
    Mean.Unmod = mean(Norm.unmodified),
    SD.Unmod = sd(Norm.unmodified, na.rm = TRUE),
  )
#UbiquitinDataFrame.Summary
UbiquitinDataFrame.Summary[is.na(UbiquitinDataFrame.Summary)] <- 0
UbiquitinDataFrame.Summary <- UbiquitinDataFrame.Summary %>% add_column(Norm.modification = "Ubiquitination")

# Combine all the PTM-pecific data frames and save
ModificationDataFrame.summary <- rbind(AcetylDataFrame.Summary,PhosphoDataFrame.Summary,UbiquitinDataFrame.Summary)
write.csv(x = ModificationDataFrame.summary, file = paste(substr(MyFileName,1,nchar(MyFileName)-4),"ModificationPositionSummary.csv",sep=""), row.names = FALSE)

# MIni-PTM data frames for plotting
AcetylDataFrame.MiniSummary <- data.frame(stringsAsFactors=FALSE,
                         Modification =  c("Acetylation","Acetylation"),
                         Names =  c("Modified","Unmodified"),
                         Mean = c(mean(AcetylDataFrame.Summary$Mean.Mod),mean(AcetylDataFrame.Summary$Mean.Unmod)),
                         SD = c(sd(AcetylDataFrame.Summary$Mean.Mod,na.rm = TRUE),sd(AcetylDataFrame.Summary$Mean.Unmod,na.rm = TRUE))/sqrt(sum(!is.na(AcetylDataFrame.Summary$Mean.Mod)))
                         )

PhosphoDataFrame.MiniSummary <- data.frame(stringsAsFactors=FALSE,
                         Modification =  c("Acetylation","Acetylation"),
                         Names =  c("Modified","Unmodified"),
                         Mean = c(mean(PhosphoDataFrame.Summary$Mean.Mod),mean(PhosphoDataFrame.Summary$Mean.Unmod)),
                         SD = c(sd(PhosphoDataFrame.Summary$Mean.Mod,na.rm = TRUE),sd(PhosphoDataFrame.Summary$Mean.Unmod,na.rm = TRUE)/sqrt(sum(!is.na(PhosphoDataFrame.Summary$Mean.Mod))))
                         )

UbiquitinDataFrame.MiniSummary <- data.frame(stringsAsFactors=FALSE,
                         Modification =  c("Acetylation","Acetylation"),
                         Names =  c("Modified","Unmodified"),
                         Mean = c(mean(UbiquitinDataFrame.Summary$Mean.Mod),mean(UbiquitinDataFrame.Summary$Mean.Unmod)),
                         SD = c(sd(UbiquitinDataFrame.Summary$Mean.Mod,na.rm = TRUE),sd(UbiquitinDataFrame.Summary$Mean.Unmod,na.rm = TRUE)/sqrt(sum(!is.na(UbiquitinDataFrame.Summary$Mean.Mod))))
                         )

```

# Do the PTM position plot
```{r}

plot1 <- ggplot(AcetylDataFrame.Summary, aes(x=Position, y=Mean.Mod,fill)) +
        geom_bar(stat="identity", fill="dodgerblue",width=15) +
        geom_errorbar(aes(ymin = Mean.Mod-SD.Mod, ymax = Mean.Mod+SD.Mod),data = AcetylDataFrame.Summary, width = 10) +
        theme_classic() +
        ggtitle("Acetylation") +
        xlab(NULL) +
        ylab("Modified fraction") +
        xlim(1,max(max(AcetylDataFrame$Position),max(PhosphoDataFrame$Position),max(UbiquitinDataFrame$Position))) +
        ylim(0,1) +
          theme(
                panel.grid.major.x = element_blank(),
                panel.border = element_blank(),
                axis.ticks.x = element_blank(),
                panel.grid.major = element_blank(),
                panel.grid.minor = element_blank(),
                panel.background = element_blank(),
                axis.line = element_line(colour = "black"),
                text = element_text(size = 12), 
                axis.text = element_text(size = 12, colour = "black"),
                plot.title=element_text(family='', colour='black', size=12),
                aspect.ratio=1/3
        )
  


plot2 <- ggplot(PhosphoDataFrame.Summary, aes(x=Position, y=Mean.Mod,fill)) +
        geom_bar(stat="identity", fill="purple",width=15) +
        geom_errorbar(aes(ymin = Mean.Mod-SD.Mod, ymax = Mean.Mod+SD.Mod),data = PhosphoDataFrame.Summary, width = 10) +
        theme_classic() +
        ggtitle("Phosphorylation") +
        xlab(NULL) +
        ylab("Modified fraction") +
        xlim(1,max(max(AcetylDataFrame$Position),max(PhosphoDataFrame$Position),max(UbiquitinDataFrame$Position))) +
        ylim(0,1) +
          theme(
                panel.grid.major.x = element_blank(),
                panel.border = element_blank(),
                axis.ticks.x = element_blank(),
                panel.grid.major = element_blank(),
                panel.grid.minor = element_blank(),
                panel.background = element_blank(),
                axis.line = element_line(colour = "black"),
                text = element_text(size = 12), 
                axis.text = element_text(size = 12, colour = "black"),
                plot.title=element_text(family='', colour='black', size=12),
                aspect.ratio=1/3
        )

plot3 <- ggplot(UbiquitinDataFrame.Summary, aes(x=Position, y=Mean.Mod,fill)) +
        geom_bar(stat="identity", fill="orangered",width=15) +
        geom_errorbar(aes(ymin = Mean.Mod-SD.Mod, ymax = Mean.Mod+SD.Mod),data = UbiquitinDataFrame.Summary, width = 10) +
        theme_classic() +
        ggtitle("Ubiquitination") +
        xlab("Amino acid position") +
        ylab("Modified fraction") +
        xlim(1,max(max(AcetylDataFrame$Position),max(PhosphoDataFrame$Position),max(UbiquitinDataFrame$Position))) +
        ylim(0,1) +
          theme(
                panel.grid.major.x = element_blank(),
                panel.border = element_blank(),
                axis.ticks.x = element_blank(),
                panel.grid.major = element_blank(),
                panel.grid.minor = element_blank(),
                panel.background = element_blank(),
                axis.line = element_line(colour = "black"),
                text = element_text(size = 12), 
                axis.text = element_text(size = 12, colour = "black"),
                plot.title=element_text(family='', colour='black', size=12),
                aspect.ratio=1/3
        )

plot4 <- ggplot(AcetylDataFrame.MiniSummary, aes(x=Modification, y=Mean,fill = Names)) +
  geom_bar(position="stack",stat="identity", fill=c("dodgerblue","gray"),width=1) + 
  geom_errorbar(aes(ymin = Mean-SD, ymax = Mean+SD), width = 0.3, position = "identity") +
  theme_classic() +
  xlab(NULL) +
  ylab(bquote(~ Sigma~"mod. fraction")) +
  ylim(0,1) +
  theme(
                panel.grid.major.x = element_blank(),
                panel.border = element_blank(),
                axis.ticks.x = element_blank(),
                panel.grid.major = element_blank(),
                panel.grid.minor = element_blank(),
                panel.background = element_blank(),
                axis.line = element_line(colour = "black"),
                text = element_text(size = 12), 
                axis.text = element_text(size = 12, colour = "black"),
                axis.title.x = element_blank(),
                axis.text.x = element_blank(),
                plot.title=element_text(family='', colour='black', size=12),
                aspect.ratio=3/1
        )

plot5 <- ggplot(PhosphoDataFrame.MiniSummary, aes(x=Modification, y=Mean,fill = Names)) +
#geom_col(aes(fill = Names), width = 0.7) 
  geom_bar(position="stack",stat="identity", fill=c("purple","gray"),width=1) + 
  geom_errorbar(aes(ymin = Mean-SD, ymax = Mean+SD), width = 0.3, position = "identity") +
  theme_classic() +
  xlab(NULL) +
  ylab(bquote(~ Sigma~"mod. fraction")) +
  ylim(0,1) +
  theme(
                panel.grid.major.x = element_blank(),
                panel.border = element_blank(),
                axis.ticks.x = element_blank(),
                panel.grid.major = element_blank(),
                panel.grid.minor = element_blank(),
                panel.background = element_blank(),
                axis.line = element_line(colour = "black"),
                text = element_text(size = 12), 
                axis.text = element_text(size = 12, colour = "black"),
                axis.title.x = element_blank(),
                axis.text.x = element_blank(),
                plot.title=element_text(family='', colour='black', size=12),
                aspect.ratio=3/1
        )

plot6 <- ggplot(UbiquitinDataFrame.MiniSummary, aes(x=Modification, y=Mean,fill = Names)) +
  geom_bar(position="stack",stat="identity", fill=c("orangered","gray"),width=1) + 
  geom_errorbar(aes(ymin = Mean-SD, ymax = Mean+SD), width = 0.3, position = "identity") +
  theme_classic() +
  xlab(NULL) +
  ylab(bquote(~ Sigma~"mod. fraction")) +
  ylim(0,1) +
  theme(
                panel.grid.major.x = element_blank(),
                panel.border = element_blank(),
                axis.ticks.x = element_blank(),
                panel.grid.major = element_blank(),
                panel.grid.minor = element_blank(),
                panel.background = element_blank(),
                axis.line = element_line(colour = "black"),
                text = element_text(size = 12), 
                axis.text = element_text(size = 12, colour = "black"),
                axis.title.x = element_blank(),
                axis.text.x = element_blank(),
                plot.title=element_text(family='', colour='black', size=12),
                aspect.ratio=3/1
        )


library(ggpubr)
Multiplot <- ggarrange(plot1, plot4, plot2, plot5, plot3, plot6,
                    labels = c("A", "B", "C","D", "E", "F"),
                    ncol = 2, nrow = 3,
                    font.label = list(size = 12, color = "black", face = "bold", family = NULL))
Multiplot

ggsave(filename = paste(substr(MyFileName,1,nchar(MyFileName)-4),".pdf",sep=""),plot = Multiplot)
```


## 5. Plot Venn Diagram
```{r}
# Venn diagram
# install.packages('VennDiagram')
#install.packages("futile.logger")
# Load library
library(futile.logger)
library(VennDiagram) # see https://cran.r-project.org/web/packages/VennDiagram/VennDiagram.pdf
                     # see also https://www.r-graph-gallery.com/14-venn-diagramm.html
# Prepare a palette of 3 colors with R colorbrewer:
library(RColorBrewer)
myCol <- brewer.pal(3, "Pastel2")
# Chart
venn.plot <- venn.diagram(
        x = list(paste(pull(filter(DataFrame,Treatment==Treatment1),var= Position) , sep=""),
                 paste(pull(filter(DataFrame,Treatment==Treatment2),var= Position) , sep=""),
                 paste(pull(filter(DataFrame,Treatment==Treatment3),var= Position) , sep="")
                 ),
        category.names = c(Treatment1Short,Treatment2Short ,Treatment3Short),
        filename = NULL, # alternatively change for a name and format: 'Venn_diagramm.png'
        output=TRUE,
        
        # Output features
        imagetype="png" ,
        height = 200 , 
        width = 200 , 
        resolution = 600,
        compression = "lzw",
        
        # Circles
        lwd = 2,
        lty = 'blank',
        fill = myCol,
        
        # Numbers
        cex = 2.0, # it can be a vector like c(0.6, 0.8, 0.6)
        fontface = "bold", # alternatively use "plain"
        fontfamily = "sans",
        
        # Set names
        cat.cex = 2.00, # Font sizes
        cat.fontface = "bold", # alternatively use "plain"
        cat.default.pos = "outer",
        cat.pos = c(-27, 27,220),
        cat.dist = c(0.055, 0.055, 0.055),
        cat.fontfamily = "sans",
        rotation = 1,
        
        # Set main title
        main = "Modified residues", 
        sub = NULL, 
        main.pos = c(0.5, 1.05), 
        main.fontface = "bold",
        main.fontfamily = "sans", 
        main.col = "black",
        main.cex = 2.0, 
        main.just = c(0.5, 1),
)
grid.draw(venn.plot);
ggsave(filename = paste(substr(MyFileName,1,nchar(MyFileName)-4),"_VennPlot.pdf",sep=""),plot = venn.plot)
# Clear plots
dev.off()  # To remove plosts from display quandrant 
```

## 6. Get PTM fold changes
```{r, message = FALSE, warning = FALSE, echo = FALSE}
# Get fold changes
Tr2vsTr1 <- intersect(pull(filter(DataFrame,Treatment==Treatment2),var= PTMID),
                          pull(filter(DataFrame,Treatment==Treatment1),var= PTMID))

Tr3vsTr1 <- intersect(pull(filter(DataFrame,Treatment==Treatment3),var= PTMID),
                            pull(filter(DataFrame,Treatment==Treatment1),var= PTMID))

# Create empty data frame
Tr2vsTr1.DF <- data.frame(Treatment = c(1:length(Tr2vsTr1)),
                   Position = c(1:length(Tr2vsTr1)),
                   Fold.change = c(1:length(Tr2vsTr1)),
                   log2.fold.change = c(1:length(Tr2vsTr1)),
                   Modifications = c(1:length(Tr2vsTr1)),
                   AminoAcid = c(1:length(Tr2vsTr1)),
                   PTMID = c(1:length(Tr2vsTr1))
                   )

Tr3vsTr1.DF <- data.frame(Treatment = c(1:length(Tr3vsTr1)),
                     Position = c(1:length(Tr3vsTr1)),
                     Fold.change = c(1:length(Tr3vsTr1)),
                     log2.fold.change = c(1:length(Tr3vsTr1)),
                     Modifications = c(1:length(Tr3vsTr1)),
                     AminoAcid = c(1:length(Tr3vsTr1)),
                     PTMID = c(1:length(Tr3vsTr1))
                     )

# Extract values
for (i in 1:length(Tr2vsTr1)) {
        # Subset a fraction of the data frame to narrow search for a given "i"
        Indices <- which(DataFrame$PTMID==Tr2vsTr1[i],arr.ind=TRUE)
        SubDataFrame <- DataFrame[Indices,]
        # Begin collecting data
        Tr2vsTr1.DF$Treatment[i] <- paste0(Treatment2Short,"/",Treatment1Short)
        Tr2vsTr1.DF$Position[i] <- SubDataFrame$Position[1]
        Tr2vsTr1.DF$Fold.change[i] <- 
                pull(filter(SubDataFrame,Treatment==Treatment2),var= Norm.modified)/
                pull(filter(SubDataFrame,Treatment==Treatment1),var= Norm.modified)
        Tr2vsTr1.DF$log2.fold.change[i] <- log2(Tr2vsTr1.DF$Fold.change[i])
        Tr2vsTr1.DF$Modifications[i] <- SubDataFrame$Modifications[1]
        Tr2vsTr1.DF$AminoAcid[i] <- SubDataFrame$aa[1]
        Tr2vsTr1.DF$PTMID[i] <- Tr2vsTr1[i]
}

for (i in 1:length(Tr3vsTr1)) {
        # Subset a fraction of the data frame to narrow search for a given "i"
        Indices <- which(DataFrame$PTMID==Tr3vsTr1[i],arr.ind=TRUE)
        SubDataFrame <- DataFrame[Indices,]
        # Begin collecting data
        Tr3vsTr1.DF$Treatment[i] <- paste0(Treatment3Short,"/",Treatment1Short)
        Tr3vsTr1.DF$Position[i] <- SubDataFrame$Position[1]
        Tr3vsTr1.DF$Fold.change[i] <- 
                pull(filter(SubDataFrame,Treatment==Treatment3),var= Norm.modified)/
                pull(filter(SubDataFrame,Treatment==Treatment1),var= Norm.modified)
        Tr3vsTr1.DF$log2.fold.change[i] <- log2(Tr3vsTr1.DF$Fold.change[i])
        Tr3vsTr1.DF$Modifications[i] <- SubDataFrame$Modifications[1]
        Tr3vsTr1.DF$AminoAcid[i] <- SubDataFrame$aa[1]
        Tr3vsTr1.DF$PTMID[i] <- Tr3vsTr1[i]
}

# Aggregate by fold change
Tr2vsTr1.DFsumlog2 <- aggregate(Tr2vsTr1.DF$log2.fold.change, by=list(Category=Tr2vsTr1.DF$Modifications), FUN=sum)
Tr3vsTr1.DFsumlog2 <- aggregate(Tr3vsTr1.DF$log2.fold.change, by=list(Category=Tr3vsTr1.DF$Modifications), FUN=sum)

# Combine Load and Unload data frames
LoadUnloadDataframe <- rbind(Tr2vsTr1.DF, Tr3vsTr1.DF)

# Save data
write.csv(x = LoadUnloadDataframe, file = paste(substr(MyFileName,1,nchar(MyFileName)-4),"_Tr2vsTr1-Tr3vsTr1.csv",sep=""), row.names = FALSE)

# Save Log2 Chart data
Loadlog2bar <- Tr2vsTr1.DFsumlog2
Varnames <- as.list(paste0(Treatment2Short,"/",Treatment1Short))
Loadlog2bar <- cbind(Loadlog2bar,Varnames)
names(Loadlog2bar) <- c("PTM", "Log2foldchange","Treatment")

Unloadlog2bar <- Tr3vsTr1.DFsumlog2
Varnames <- as.list(paste0(Treatment3Short,"/",Treatment1Short))
Unloadlog2bar <- cbind(Unloadlog2bar,Varnames)
names(Unloadlog2bar) <- c("PTM", "Log2foldchange","Treatment")

LoadUnloadLog2Bar <- rbind(Loadlog2bar,Unloadlog2bar)
# Save data
write.csv(x = LoadUnloadLog2Bar, file = paste(substr(MyFileName,1,nchar(MyFileName)-4),"_Tr2vsTr1-Tr3vsTr1-Log2Bar.csv",sep=""), row.names = FALSE)
```

# Do the Plot
```{r, message = FALSE, warning = FALSE, echo = FALSE}
Col <- c("dodgerblue","purple","orangered")

plot4 <- ggplot(Tr2vsTr1.DF, aes(x=Position, y=log2.fold.change,shape=factor(Modifications),fill)) +
        geom_segment( aes(x=Position, xend=Position, y=0, yend=log2.fold.change), color="grey",lwd=1) +
        geom_point(size=4, aes(colour = factor(Modifications))) + scale_colour_manual(values = Col)+
        theme(
                panel.grid.major.x = element_blank(),
                panel.border = element_blank(),
                axis.ticks.x = element_blank(),
                panel.grid.major = element_blank(),
                panel.grid.minor = element_blank(),
                panel.background = element_blank(),
                axis.line = element_line(colour = "black"),
                axis.text.x = element_text(color="black", size=11),
                axis.text.y = element_text(color="black", size=11),
                plot.title=element_text(family='', colour='black', size=11)) + 
        ggtitle(bquote(~ .(Treatment2Short)~"/"~.(Treatment1Short)~"Log"[2]~" fold change")) +  
        ylim(-abs(max(max(Tr2vsTr1.DF$log2.fold.change),max(Tr3vsTr1.DF$log2.fold.change))), 
              abs(max(max(Tr2vsTr1.DF$log2.fold.change),max(Tr3vsTr1.DF$log2.fold.change)))
            ) +
        xlab("Amino acid position") +
        ylab(bquote("Log"[2]~"("~ .(Treatment2Short)~"/"~.(Treatment1Short)~")")) +                
        geom_hline(yintercept=0, linetype='dotted', col = 'black',alpha = 0.5) + theme(legend.position = "none")

plot5 <- ggplot(Tr3vsTr1.DF, aes(x=Position, y=log2.fold.change,shape=factor(Modifications),fill)) +
        geom_segment( aes(x=Position, xend=Position, y=0, yend=log2.fold.change), color="grey",lwd=1) +
        geom_point(size=4, aes(colour = factor(Modifications))) + scale_colour_manual(values = Col)+
        theme(
                panel.grid.major.x = element_blank(),
                panel.border = element_blank(),
                axis.ticks.x = element_blank(),
                panel.grid.major = element_blank(),
                panel.grid.minor = element_blank(),
                panel.background = element_blank(),
                axis.line = element_line(colour = "black"),
                axis.text.x = element_text(color="black", size=11),
                axis.text.y = element_text(color="black", size=11),
                plot.title=element_text(family='', colour='black', size=11)) + 

        ggtitle(bquote(~.(Treatment3Short)~"/"~.(Treatment1Short)~"Log"[2]~" fold change")) + 
        ylim(-abs(max(max(Tr2vsTr1.DF$log2.fold.change),max(Tr3vsTr1.DF$log2.fold.change))), 
              abs(max(max(Tr2vsTr1.DF$log2.fold.change),max(Tr3vsTr1.DF$log2.fold.change)))
            ) +
        xlab("Amino acid position") +
        ylab(bquote("Log"[2]~"("~ .(Treatment3Short)~"/"~.(Treatment1Short)~")")) +               
        geom_hline(yintercept=0, linetype='dotted', col = 'black',alpha = 0.5) + theme(legend.position = "none")
plot6 <- ggplot(Tr2vsTr1.DFsumlog2, aes(x=Category, y=x,fill=Category)) +geom_bar(stat="identity") + scale_fill_manual(values = Col)+
        theme(
                panel.grid.major.x = element_blank(),
                panel.border = element_blank(),
                axis.ticks.x = element_blank(),
                panel.grid.major = element_blank(),
                panel.grid.minor = element_blank(),
                panel.background = element_blank(),
                axis.line = element_line(colour = "black"),
                axis.text.x = element_text(color="black", size=11),
                axis.text.y = element_text(color="black", size=11),
                plot.title=element_text(family='', colour='black', size=11)) + 
        ylim(-abs(max(max(Tr2vsTr1.DFsumlog2$x),max(Tr3vsTr1.DFsumlog2$x))),
              abs(max(max(Tr2vsTr1.DFsumlog2$x),max(Tr3vsTr1.DFsumlog2$x)))
             ) +
        xlab(" ") +
        ylab(bquote(~ Sigma~" Log"[2]~"("~ .(Treatment2Short)~"/"~.(Treatment1Short)~")")) +                 
        geom_hline(yintercept=0, linetype='dotted', col = 'black',alpha = 0.5) +
        theme(legend.position = "none")

plot7 <- ggplot(Tr3vsTr1.DFsumlog2, aes(x=Category, y=x,fill=Category)) +geom_bar(stat="identity") + scale_fill_manual(values = Col)+
        theme(
                panel.grid.major.x = element_blank(),
                panel.border = element_blank(),
                axis.ticks.x = element_blank(),
                panel.grid.major = element_blank(),
                panel.grid.minor = element_blank(),
                panel.background = element_blank(),
                axis.line = element_line(colour = "black"),
                axis.text.x = element_text(color="black", size=11),
                axis.text.y = element_text(color="black", size=11),
                plot.title=element_text(family='', colour='black', size=11)) + 
          ylim(-abs(max(max(Tr2vsTr1.DFsumlog2$x),max(Tr3vsTr1.DFsumlog2$x))),
              abs(max(max(Tr2vsTr1.DFsumlog2$x),max(Tr3vsTr1.DFsumlog2$x)))
             ) +
        xlab(" ") +
        ylab(bquote(~Sigma~" Log"[2]~"("~ .(Treatment3Short)~"/"~.(Treatment1Short)~")")) + 
        geom_hline(yintercept=0, linetype='dotted', col = 'black',alpha = 0.5) +
        theme(legend.position = "none")

Multiplot <- ggarrange(plot4, plot6, plot5, plot7,
                       labels = c("A", "B","C","D"),
                       ncol = 2, nrow = 2,widths = c(2,1,2,1))
Multiplot

ggsave(filename = paste(substr(MyFileName,1,nchar(MyFileName)-4),"_FoldChange.pdf",sep=""),plot = Multiplot)

```

## 10. Clean up environment
```{r}
# Clear environment
rm(list = ls()) 
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
#dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# Clear mind :)
```
